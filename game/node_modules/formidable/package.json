{
  "name": "formidable",
  "description": "A node.js module for parsing form data, especially file uploads.",
  "homepage": "https://github.com/felixge/node-formidable",
  "version": "1.0.13",
  "devDependencies": {
    "gently": "0.8.0",
    "findit": "0.1.1",
    "hashish": "0.0.4",
    "urun": "~0.0.6",
    "utest": "0.0.3",
    "request": "~2.11.4"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/index",
  "scripts": {
    "test": "node test/run.js",
    "clean": "rm test/tmp/*"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/felixge/node-formidable.git"
  },
  "bugs": {
    "url": "http://github.com/felixge/node-formidable/issues"
  },
  "optionalDependencies": {},
  "readme": "# Formidable\r\n\r\n[![Build Status](https://secure.travis-ci.org/felixge/node-formidable.png?branch=master)](http://travis-ci.org/felixge/node-formidable)\r\n\r\n## Purpose\r\n\r\nA node.js module for parsing form data, especially file uploads.\r\n\r\n## Current status\r\n\r\nThis module was developed for [Transloadit](http://transloadit.com/), a service focused on uploading\r\nand encoding images and videos. It has been battle-tested against hundreds of GB of file uploads from\r\na large variety of clients and is considered production-ready.\r\n\r\n## Features\r\n\r\n* Fast (~500mb/sec), non-buffering multipart parser\r\n* Automatically writing file uploads to disk\r\n* Low memory footprint\r\n* Graceful error handling\r\n* Very high test coverage\r\n\r\n## Installation\r\n\r\nVia [npm](http://github.com/isaacs/npm):\r\n```\r\nnpm install formidable@latest\r\n```\r\nManually:\r\n```\r\ngit clone git://github.com/felixge/node-formidable.git formidable\r\nvim my.js\r\n# var formidable = require('./formidable');\r\n```\r\n\r\nNote: Formidable requires [gently](http://github.com/felixge/node-gently) to run the unit tests, but you won't need it for just using the library.\r\n\r\n## Example\r\n\r\nParse an incoming file upload.\r\n```javascript\r\nvar formidable = require('formidable'),\r\n    http = require('http'),\r\n    util = require('util');\r\n\r\nhttp.createServer(function(req, res) {\r\n  if (req.url == '/upload' && req.method.toLowerCase() == 'post') {\r\n    // parse a file upload\r\n    var form = new formidable.IncomingForm();\r\n\r\n    form.parse(req, function(err, fields, files) {\r\n      res.writeHead(200, {'content-type': 'text/plain'});\r\n      res.write('received upload:\\n\\n');\r\n      res.end(util.inspect({fields: fields, files: files}));\r\n    });\r\n\r\n    return;\r\n  }\r\n\r\n  // show a file upload form\r\n  res.writeHead(200, {'content-type': 'text/html'});\r\n  res.end(\r\n    '<form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">'+\r\n    '<input type=\"text\" name=\"title\"><br>'+\r\n    '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\r\n    '<input type=\"submit\" value=\"Upload\">'+\r\n    '</form>'\r\n  );\r\n}).listen(8080);\r\n```\r\n## API\r\n\r\n### Formidable.IncomingForm\r\n```javascript\r\nvar form = new formidable.IncomingForm()\r\n```\r\nCreates a new incoming form.\r\n\r\n```javascript\r\nform.encoding = 'utf-8';\r\n```\r\nSets encoding for incoming form fields.\r\n\r\n```javascript\r\nform.uploadDir = process.env.TMP || process.env.TMPDIR || process.env.TEMP || '/tmp' || process.cwd();\r\n```\r\nThe directory for placing file uploads in. You can move them later on using\r\n`fs.rename()`. The default directory is picked at module load time depending on\r\nthe first existing directory from those listed above.\r\n\r\n```javascript\r\nform.keepExtensions = false;\r\n```\r\nIf you want the files written to `form.uploadDir` to include the extensions of the original files, set this property to `true`.\r\n\r\n```javascript\r\nform.type\r\n```\r\nEither 'multipart' or 'urlencoded' depending on the incoming request.\r\n\r\n```javascript\r\nform.maxFieldsSize = 2 * 1024 * 1024;\r\n```\r\nLimits the amount of memory a field (not file) can allocate in bytes.\r\nIf this value is exceeded, an `'error'` event is emitted. The default\r\nsize is 2MB.\r\n\r\n```javascript\r\nform.maxFields = 0;\r\n```\r\nLimits the number of fields that the querystring parser will decode. Defaults\r\nto 0 (unlimited).\r\n\r\n```javascript\r\nform.hash = false;\r\n```\r\nIf you want checksums calculated for incoming files, set this to either `'sha1'` or `'md5'`.\r\n\r\n```javascript\r\nform.bytesReceived\r\n```\r\nThe amount of bytes received for this form so far.\r\n\r\n```javascript\r\nform.bytesExpected\r\n```\r\nThe expected number of bytes in this form.\r\n\r\n```javascript\r\nform.parse(request, [cb]);\r\n```\r\nParses an incoming node.js `request` containing form data. If `cb` is provided, all fields an files are collected and passed to the callback:\r\n\r\n\r\n```javascript\r\nform.parse(req, function(err, fields, files) {\r\n  // ...\r\n});\r\n\r\nform.onPart(part);\r\n```\r\nYou may overwrite this method if you are interested in directly accessing the multipart stream. Doing so will disable any `'field'` / `'file'` events  processing which would occur otherwise, making you fully responsible for handling the processing.\r\n\r\n```javascript\r\nform.onPart = function(part) {\r\n  part.addListener('data', function() {\r\n    // ...\r\n  });\r\n}\r\n```\r\nIf you want to use formidable to only handle certain parts for you, you can do so:\r\n```javascript\r\nform.onPart = function(part) {\r\n  if (!part.filename) {\r\n    // let formidable handle all non-file parts\r\n    form.handlePart(part);\r\n  }\r\n}\r\n```\r\nCheck the code in this method for further inspiration.\r\n\r\n\r\n### Formidable.File\r\n```javascript\r\nfile.size = 0\r\n```\r\nThe size of the uploaded file in bytes. If the file is still being uploaded (see `'fileBegin'` event), this property says how many bytes of the file have been written to disk yet.\r\n```javascript\r\nfile.path = null\r\n```\r\nThe path this file is being written to. You can modify this in the `'fileBegin'` event in\r\ncase you are unhappy with the way formidable generates a temporary path for your files.\r\n```javascript\r\nfile.name = null\r\n```\r\nThe name this file had according to the uploading client.\r\n```javascript\r\nfile.type = null\r\n```\r\nThe mime type of this file, according to the uploading client.\r\n```javascript\r\nfile.lastModifiedDate = null\r\n```\r\nA date object (or `null`) containing the time this file was last written to. Mostly\r\nhere for compatibility with the [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\r\n```javascript\r\nfile.hash = null\r\n```\r\nIf hash calculation was set, you can read the hex digest out of this var.\r\n\r\n#### Formidable.File#toJSON()\r\n\r\n  This method returns a JSON-representation of the file, allowing you to\r\n  `JSON.stringify()` the file which is useful for logging and responding\r\n  to requests.\r\n\r\n### Events\r\n\r\n\r\n#### 'progress'\r\n```javascript\r\nform.on('progress', function(bytesReceived, bytesExpected) {\r\n});\r\n```\r\nEmitted after each incoming chunk of data that has been parsed. Can be used to roll your own progress bar.\r\n\r\n\r\n\r\n#### 'field'\r\n```javascript\r\nform.on('field', function(name, value) {\r\n});\r\n```\r\n\r\n#### 'fileBegin'\r\n\r\nEmitted whenever a field / value pair has been received.\r\n```javascript\r\nform.on('fileBegin', function(name, file) {\r\n});\r\n```\r\n\r\n#### 'file'\r\n\r\nEmitted whenever a new file is detected in the upload stream. Use this even if\r\nyou want to stream the file to somewhere else while buffering the upload on\r\nthe file system.\r\n\r\nEmitted whenever a field / file pair has been received. `file` is an instance of `File`.\r\n```javascript\r\nform.on('file', function(name, file) {\r\n});\r\n```\r\n\r\n#### 'error'\r\n\r\nEmitted when there is an error processing the incoming form. A request that experiences an error is automatically paused, you will have to manually call `request.resume()` if you want the request to continue firing `'data'` events.\r\n```javascript\r\nform.on('error', function(err) {\r\n});\r\n```\r\n\r\n#### 'aborted'\r\n\r\n\r\nEmitted when the request was aborted by the user. Right now this can be due to a 'timeout' or 'close' event on the socket. In the future there will be a separate 'timeout' event (needs a change in the node core).\r\n```javascript\r\nform.on('aborted', function() {\r\n});\r\n```\r\n\r\n##### 'end'\r\n```javascript\r\nform.on('end', function() {\r\n});\r\n```\r\nEmitted when the entire request has been received, and all contained files have finished flushing to disk. This is a great place for you to send your response.\r\n\r\n\r\n\r\n## Changelog\r\n\r\n### v1.0.13\r\n\r\n* Only update hash if update method exists (Sven Lito)\r\n* According to travis v0.10 needs to go quoted (Sven Lito)\r\n* Bumping build node versions (Sven Lito)\r\n* Additional fix for empty requests (Eugene Girshov)\r\n* Change the default to 1000, to match the new Node behaviour. (OrangeDog)\r\n* Add ability to control maxKeys in the querystring parser. (OrangeDog)\r\n* Adjust test case to work with node 0.9.x (Eugene Girshov)\r\n* Update package.json (Sven Lito)\r\n* Path adjustment according to eb4468b (Markus Ast)\r\n\r\n### v1.0.12\r\n\r\n* Emit error on aborted connections (Eugene Girshov)\r\n* Add support for empty requests (Eugene Girshov)\r\n* Fix name/filename handling in Content-Disposition (jesperp)\r\n* Tolerate malformed closing boundary in multipart (Eugene Girshov)\r\n* Ignore preamble in multipart messages (Eugene Girshov)\r\n* Add support for application/json (Mike Frey, Carlos Rodriguez)\r\n* Add support for Base64 encoding (Elmer Bulthuis)\r\n* Add File#toJSON (TJ Holowaychuk)\r\n* Remove support for Node.js 0.4 & 0.6 (Andrew Kelley)\r\n* Documentation improvements (Sven Lito, Andre Azevedo)\r\n* Add support for application/octet-stream (Ion Lupascu, Chris Scribner)\r\n* Use os.tmpDir() to get tmp directory (Andrew Kelley)\r\n* Improve package.json (Andrew Kelley, Sven Lito)\r\n* Fix benchmark script (Andrew Kelley)\r\n* Fix scope issue in incoming_forms (Sven Lito)\r\n* Fix file handle leak on error (OrangeDog)\r\n\r\n### v1.0.11\r\n\r\n* Calculate checksums for incoming files (sreuter)\r\n* Add definition parameters to \"IncomingForm\" as an argument (Math-)\r\n\r\n### v1.0.10\r\n\r\n* Make parts to be proper Streams (Matt Robenolt)\r\n\r\n### v1.0.9\r\n\r\n* Emit progress when content length header parsed (Tim Koschützki)\r\n* Fix Readme syntax due to GitHub changes (goob)\r\n* Replace references to old 'sys' module in Readme with 'util' (Peter Sugihara)\r\n\r\n### v1.0.8\r\n\r\n* Strip potentially unsafe characters when using `keepExtensions: true`.\r\n* Switch to utest / urun for testing\r\n* Add travis build\r\n\r\n### v1.0.7\r\n\r\n* Remove file from package that was causing problems when installing on windows. (#102)\r\n* Fix typos in Readme (Jason Davies).\r\n\r\n### v1.0.6\r\n\r\n* Do not default to the default to the field name for file uploads where\r\n  filename=\"\".\r\n\r\n### v1.0.5\r\n\r\n* Support filename=\"\" in multipart parts\r\n* Explain unexpected end() errors in parser better\r\n\r\n**Note:** Starting with this version, formidable emits 'file' events for empty\r\nfile input fields. Previously those were incorrectly emitted as regular file\r\ninput fields with value = \"\".\r\n\r\n### v1.0.4\r\n\r\n* Detect a good default tmp directory regardless of platform. (#88)\r\n\r\n### v1.0.3\r\n\r\n* Fix problems with utf8 characters (#84) / semicolons in filenames (#58)\r\n* Small performance improvements\r\n* New test suite and fixture system\r\n\r\n### v1.0.2\r\n\r\n* Exclude node\\_modules folder from git\r\n* Implement new `'aborted'` event\r\n* Fix files in example folder to work with recent node versions\r\n* Make gently a devDependency\r\n\r\n[See Commits](https://github.com/felixge/node-formidable/compare/v1.0.1...v1.0.2)\r\n\r\n### v1.0.1\r\n\r\n* Fix package.json to refer to proper main directory. (#68, Dean Landolt)\r\n\r\n[See Commits](https://github.com/felixge/node-formidable/compare/v1.0.0...v1.0.1)\r\n\r\n### v1.0.0\r\n\r\n* Add support for multipart boundaries that are quoted strings. (Jeff Craig)\r\n\r\nThis marks the beginning of development on version 2.0 which will include\r\nseveral architectural improvements.\r\n\r\n[See Commits](https://github.com/felixge/node-formidable/compare/v0.9.11...v1.0.0)\r\n\r\n### v0.9.11\r\n\r\n* Emit `'progress'` event when receiving data, regardless of parsing it. (Tim Koschützki)\r\n* Use [W3C FileAPI Draft](http://dev.w3.org/2006/webapi/FileAPI/) properties for File class\r\n\r\n**Important:** The old property names of the File class will be removed in a\r\nfuture release.\r\n\r\n[See Commits](https://github.com/felixge/node-formidable/compare/v0.9.10...v0.9.11)\r\n\r\n### Older releases\r\n\r\nThese releases were done before starting to maintain the above Changelog:\r\n\r\n* [v0.9.10](https://github.com/felixge/node-formidable/compare/v0.9.9...v0.9.10)\r\n* [v0.9.9](https://github.com/felixge/node-formidable/compare/v0.9.8...v0.9.9)\r\n* [v0.9.8](https://github.com/felixge/node-formidable/compare/v0.9.7...v0.9.8)\r\n* [v0.9.7](https://github.com/felixge/node-formidable/compare/v0.9.6...v0.9.7)\r\n* [v0.9.6](https://github.com/felixge/node-formidable/compare/v0.9.5...v0.9.6)\r\n* [v0.9.5](https://github.com/felixge/node-formidable/compare/v0.9.4...v0.9.5)\r\n* [v0.9.4](https://github.com/felixge/node-formidable/compare/v0.9.3...v0.9.4)\r\n* [v0.9.3](https://github.com/felixge/node-formidable/compare/v0.9.2...v0.9.3)\r\n* [v0.9.2](https://github.com/felixge/node-formidable/compare/v0.9.1...v0.9.2)\r\n* [v0.9.1](https://github.com/felixge/node-formidable/compare/v0.9.0...v0.9.1)\r\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\r\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\r\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\r\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\r\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\r\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\r\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\r\n* [v0.9.0](https://github.com/felixge/node-formidable/compare/v0.8.0...v0.9.0)\r\n* [v0.1.0](https://github.com/felixge/node-formidable/commits/v0.1.0)\r\n\r\n## License\r\n\r\nFormidable is licensed under the MIT license.\r\n\r\n## Ports\r\n\r\n* [multipart-parser](http://github.com/FooBarWidget/multipart-parser): a C++ parser based on formidable\r\n\r\n## Credits\r\n\r\n* [Ryan Dahl](http://twitter.com/ryah) for his work on [http-parser](http://github.com/ry/http-parser) which heavily inspired multipart_parser.js\r\n",
  "readmeFilename": "Readme.md",
  "_id": "formidable@1.0.13",
  "dependencies": {},
  "dist": {
    "shasum": "386f451bf726e6cad49834a4673d833fa82ffc37"
  },
  "_resolved": "git+ssh://git@github.com/:j03m/node-formidable.git#f81558d1e68891bcb6435de2f0477e9b615d4434",
  "_from": "git+ssh://git@github.com:j03m/node-formidable.git"
}
